# browser_searcher.py - –° –ë–û–õ–¨–®–ò–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –¢–û–í–ê–†–û–í
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

class WBBrowserSearcher:
    def __init__(self):
        self.driver = None
        self.setup_driver()
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            options = webdriver.ChromeOptions()
            options.add_argument('--headless')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
            
            self.driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=options
            )
            
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            raise
    
    def search_products(self, query, max_price=None, limit=15):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä - —Ç–µ–ø–µ—Ä—å –¥–æ 15 —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫: {query}, –ª–∏–º–∏—Ç: {limit}")
            
            if not query or len(query) < 2:
                return []
            
            # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è URL
            encoded_query = query.replace(' ', '%20')
            search_url = f"https://www.wildberries.ru/catalog/0/search.aspx?search={encoded_query}&sort=popular"
            
            self.driver.get(search_url)
            time.sleep(5)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
            for scroll_pos in [800, 1600, 2400]:
                self.driver.execute_script(f"window.scrollTo(0, {scroll_pos});")
                time.sleep(2)
            
            products = []
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            selectors = [
                "div.product-card__wrapper",
                "div[data-card]",
                "article.product-card",
                ".product-card"
            ]
            
            product_cards = []
            for selector in selectors:
                try:
                    found = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if found:
                        product_cards = found
                        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(product_cards)}")
                        break
                except:
                    continue
            
            if not product_cards:
                print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤
            for card in product_cards[:limit]:
                try:
                    product_info = self.parse_product_card(card)
                    if product_info and product_info.get('price', 0) > 0:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
                        if max_price and product_info['price'] > max_price:
                            continue
                        products.append(product_info)
                except Exception as e:
                    continue
            
            return products
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def parse_product_card(self, card):
        """–ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            name_selectors = [
                ".product-card__name span",
                ".product-card__name",
                ".card-product__name",
                ".product-name"
            ]
            
            for selector in name_selectors:
                try:
                    name_elem = card.find_element(By.CSS_SELECTOR, selector)
                    name = name_elem.text.strip()[:80]
                    if name and name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                        break
                except:
                    continue
            
            # –¶–µ–Ω–∞
            price = 0
            price_selectors = [
                ".price__lower-price",
                ".price-old", 
                ".final-cost",
                ".lower-price"
            ]
            
            for selector in price_selectors:
                try:
                    price_elem = card.find_element(By.CSS_SELECTOR, selector)
                    price_text = price_elem.text.replace('‚ÇΩ', '').replace(' ', '').strip()
                    digits = ''.join(filter(str.isdigit, price_text))
                    if digits:
                        price = int(digits)
                        break
                except:
                    continue
            
            # –ë—Ä–µ–Ω–¥
            brand = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                brand_elem = card.find_element(By.CSS_SELECTOR, ".product-card__brand")
                brand = brand_elem.text.strip()
            except:
                pass
            
            # –†–µ–π—Ç–∏–Ω–≥ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
            rating = 0
            rating_selectors = [
                ".product-card__rating",
                ".stars span",
                ".rating",
                "[data-rating]",
                ".product-card__rating span"
            ]
            
            for selector in rating_selectors:
                try:
                    rating_elem = card.find_element(By.CSS_SELECTOR, selector)
                    rating_text = rating_elem.text.strip()
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
                    if rating_text:
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                        clean_text = rating_text.replace(',', '.').replace(' ', '')
                        # –ò—â–µ–º —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                        try:
                            rating = float(clean_text)
                            if 0 <= rating <= 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                                break
                        except:
                            pass
                    
                    # –ü—Ä–æ–±—É–µ–º –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞
                    try:
                        rating_attr = rating_elem.get_attribute('data-rating')
                        if rating_attr:
                            rating = float(rating_attr)
                            if 0 <= rating <= 5:
                                break
                    except:
                        pass
                        
                except:
                    continue
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            feedback_count = 0
            feedback_selectors = [
                ".product-card__count",
                ".review-count",
                ".feedback-count",
                "[data-feedbacks]",
                ".product-card__review"
            ]
            
            for selector in feedback_selectors:
                try:
                    feedback_elem = card.find_element(By.CSS_SELECTOR, selector)
                    feedback_text = feedback_elem.text.strip()
                    digits = ''.join(filter(str.isdigit, feedback_text))
                    if digits:
                        feedback_count = int(digits)
                        break
                except:
                    continue
            
            # –°—Å—ã–ª–∫–∞
            url = ""
            link_selectors = [
                "a.product-card__link",
                "a[href*='/catalog/']",
                "a.card-product"
            ]
            
            for selector in link_selectors:
                try:
                    link_elem = card.find_element(By.CSS_SELECTOR, selector)
                    url = link_elem.get_attribute('href')
                    if url:
                        break
                except:
                    continue
            
            # –ê—Ä—Ç–∏–∫—É–ª –∏–∑ URL
            articul = ""
            if url and '/catalog/' in url:
                try:
                    articul = url.split('/catalog/')[1].split('/')[0]
                except:
                    pass
            
            return {
                'name': name,
                'price': price,
                'brand': brand,
                'rating': round(rating, 1),  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                'feedback_count': feedback_count,
                'articul': articul,
                'url': url
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            try:
                self.driver.quit()
                print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass
