# telegram_bot.py - –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô –ò –ë–û–õ–¨–®–ò–ú –í–´–ë–û–†–û–ú
import asyncio
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
import config
from browser_searcher import WBBrowserSearcher

class WBBot:
    def __init__(self):
        self.searcher = WBBrowserSearcher()
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        self.user_searches = {}  # –•—Ä–∞–Ω–∏–º –ø–æ–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_search))
        self.application.add_handler(CallbackQueryHandler(self.handle_button_click))
    
    async def start_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB Hunter!*

*–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
üìà *–î–æ 15 —Ç–æ–≤–∞—Ä–æ–≤* –≤ –æ–¥–Ω–æ–π –≤—ã–¥–∞—á–µ
üìÑ *–ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥* - –ª–∏—Å—Ç–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚≠ê *–¢–æ—á–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏* - 4.8, 5.0, 3.5 –∏ —Ç.–¥.
üéØ *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è* –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∏—â–µ—à—å!

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ `—Ç–µ—Ç—Ä–∞–¥–∏ –∞4 –∫–ª–µ—Ç–∫–∞ –¥–æ 300`
‚Ä¢ `–Ω–æ—É—Ç–±—É–∫ asus –¥–æ 50000`  
‚Ä¢ `–Ω–∞—É—à–Ω–∏–∫–∏ bluetooth –¥–æ 2000`

*–ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:*
‚ñ∂Ô∏è *–î–∞–ª–µ–µ* - —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
üîÑ *–ï—â–µ —Ç–æ–≤–∞—Ä—ã* - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="examples")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
*–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*

*–§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:*
`[—Ç–æ–≤–∞—Ä] –¥–æ [–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞]`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ `—Ç–µ—Ç—Ä–∞–¥–∏ –∞4 –∫–ª–µ—Ç–∫–∞ –¥–æ 300`
‚Ä¢ `–Ω–æ—É—Ç–±—É–∫ asus –¥–æ 50000`
‚Ä¢ `–∫—Ä–æ—Å—Å–æ–≤–∫–∏ nike 42 —Ä–∞–∑–º–µ—Ä`

*–ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏:*
‚ñ∂Ô∏è *–î–∞–ª–µ–µ* - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
üîÑ *–ï—â–µ —Ç–æ–≤–∞—Ä—ã* - –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
üìä *–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã* - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã

*–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ—Ç:*
üí∞ –¶–µ–Ω–∞ | üè∑Ô∏è –ë—Ä–µ–Ω–¥ | ‚≠ê –†–µ–π—Ç–∏–Ω–≥ | üí¨ –û—Ç–∑—ã–≤—ã | üîó –°—Å—ã–ª–∫–∞

*–ù–∞–ø–∏—à–∏ —á—Ç–æ –∏—â–µ—à—å!* üîç
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def handle_button_click(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "examples":
            await self.show_examples(query)
        elif query.data == "help":
            await self.show_help(query)
        elif query.data == "back_to_main":
            await self.back_to_main(query)
        elif query.data.startswith("page_"):
            await self.show_page(query, user_id)
        elif query.data == "more_products":
            await self.search_more_products(query, user_id)
        elif query.data == "show_all":
            await self.show_all_products(query, user_id)
    
    async def show_page(self, query, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤"""
        if user_id not in self.user_searches:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return
        
        search_data = self.user_searches[user_id]
        current_page = search_data.get('current_page', 0)
        products = search_data['products']
        query_text = search_data['query']
        max_price = search_data['max_price']
        
        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        current_page += 1
        start_idx = current_page * 5
        end_idx = start_idx + 5
        
        if start_idx >= len(products):
            await query.answer("–≠—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã!")
            return
        
        page_products = products[start_idx:end_idx]
        search_data['current_page'] = current_page
        
        response = self.format_search_response(page_products, query_text, max_price, current_page, len(products))
        keyboard = self.create_results_keyboard(current_page, len(products), len(page_products))
        
        await query.edit_message_text(response, parse_mode='Markdown', 
                                    reply_markup=keyboard, disable_web_page_preview=True)
    
    async def search_more_products(self, query, user_id):
        """–ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
        if user_id not in self.user_searches:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return
        
        search_data = self.user_searches[user_id]
        query_text = search_data['query']
        max_price = search_data['max_price']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"üîç *–ò—â–µ–º –µ—â–µ —Ç–æ–≤–∞—Ä—ã:* {query_text}\n"
            f"üí∞ *–ë—é–¥–∂–µ—Ç:* –¥–æ {max_price}‚ÇΩ\n\n"
            f"‚è≥ *–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...*",
            parse_mode='Markdown'
        )
        
        # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
        products = await asyncio.get_event_loop().run_in_executor(
            None, 
            self.searcher.search_products, 
            query_text, max_price, 20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        )
        
        if products:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.user_searches[user_id] = {
                'products': products,
                'query': query_text,
                'max_price': max_price,
                'current_page': 0
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_products = products[:5]
            response = self.format_search_response(page_products, query_text, max_price, 0, len(products))
            keyboard = self.create_results_keyboard(0, len(products), len(page_products))
            
            await query.edit_message_text(response, parse_mode='Markdown', 
                                        reply_markup=keyboard, disable_web_page_preview=True)
        else:
            await query.edit_message_text(
                f"üòî *–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
                f"*–ó–∞–ø—Ä–æ—Å:* {query_text}",
                parse_mode='Markdown'
            )
    
    async def show_all_products(self, query, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å—Ä–∞–∑—É"""
        if user_id not in self.user_searches:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return
        
        search_data = self.user_searches[user_id]
        products = search_data['products']
        query_text = search_data['query']
        max_price = search_data['max_price']
        
        response = self.format_search_response(products, query_text, max_price, 0, len(products), show_all=True)
        
        await query.edit_message_text(response, parse_mode='Markdown', disable_web_page_preview=True)
    
    def format_search_response(self, products, query, max_price, current_page, total_products, show_all=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        if not products:
            return f"üòî *–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤*\n\n*–ó–∞–ø—Ä–æ—Å:* {query}"
        
        if show_all:
            response = f"üìä *–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({len(products)})*\n"
        else:
            response = f"üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}*\n"
        
        response += f"üéØ *–ó–∞–ø—Ä–æ—Å:* {query}\n"
        if max_price:
            response += f"üí∞ *–ë—é–¥–∂–µ—Ç:* –¥–æ {max_price}‚ÇΩ\n"
        response += f"üì¶ *–¢–æ–≤–∞—Ä–æ–≤:* {len(products)} –∏–∑ {total_products}\n\n"
        
        start_idx = current_page * 5 if not show_all else 0
        
        for i, product in enumerate(products, start_idx + 1):
            response += f"*{i}. {product['name']}*\n"
            response += f"   üí∞ *{product['price']}‚ÇΩ* | üè∑Ô∏è {product['brand']}\n"
            
            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
            if product['rating'] > 0:
                # –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                full_stars = int(product['rating'])
                half_star = product['rating'] % 1 >= 0.5
                empty_stars = 5 - full_stars - (1 if half_star else 0)
                
                stars = "‚≠ê" * full_stars
                if half_star:
                    stars += "‚ú®"
                stars += "‚òÜ" * empty_stars
                
                response += f"   {stars} *{product['rating']}*"
                if product['feedback_count'] > 0:
                    response += f" | üí¨ {product['feedback_count']}"
                response += "\n"
            elif product['feedback_count'] > 0:
                response += f"   üí¨ *–û—Ç–∑—ã–≤—ã:* {product['feedback_count']}\n"
            
            if product['url']:
                response += f"   üîó [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ WB]({product['url']})\n"
            
            response += "\n"
        
        if not show_all and len(products) < total_products:
            response += f"üí° *–ï—â–µ {total_products - len(products) - start_idx} —Ç–æ–≤–∞—Ä–æ–≤...*"
        
        return response
    
    def create_results_keyboard(self, current_page, total_products, current_count):
        """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if current_page * 5 + current_count < total_products:
            keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã", callback_data="page_next")])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        if total_products > 5:
            keyboard.append([
                InlineKeyboardButton("üîÑ –ï—â–µ —Ç–æ–≤–∞—Ä—ã", callback_data="more_products"),
                InlineKeyboardButton("üìä –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_all")
            ])
        else:
            keyboard.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="more_products")])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def show_examples(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        examples_text = """
üìã *–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—á–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:*

*–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è:*
‚Ä¢ `—Ç–µ—Ç—Ä–∞–¥—å –∞4 –∫–ª–µ—Ç–∫–∞ 48 –ª–∏—Å—Ç–æ–≤`
‚Ä¢ `—Ä—É—á–∫–∞ –≥–µ–ª–µ–≤–∞—è —Å–∏–Ω—è—è –¥–æ 100`
‚Ä¢ `–±–ª–æ–∫–Ω–æ—Ç –∞5 –¥–æ 500`
‚Ä¢ `–∫–∞—Ä–∞–Ω–¥–∞—à–∏ —á–µ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—Ç–Ω—ã–µ`

*–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞:*
‚Ä¢ `–Ω–∞—É—à–Ω–∏–∫–∏ bluetooth –¥–æ 2000`
‚Ä¢ `–º—ã—à—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è`
‚Ä¢ `—á–µ—Ö–æ–ª –¥–ª—è iphone 13`
‚Ä¢ `power bank 10000 mah`

*–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å:*
‚Ä¢ `–∫—Ä–æ—Å—Å–æ–≤–∫–∏ nike 42 —Ä–∞–∑–º–µ—Ä`
‚Ä¢ `—Ñ—É—Ç–±–æ–ª–∫–∞ –º—É–∂—Å–∫–∞—è —á–µ—Ä–Ω–∞—è`
‚Ä¢ `–¥–∂–∏–Ω—Å—ã –º—É–∂—Å–∫–∏–µ 50 —Ä–∞–∑–º–µ—Ä`
‚Ä¢ `–∫—É—Ä—Ç–∫–∞ –∑–∏–º–Ω—è—è –¥–æ 5000`

üí° *–ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤!*
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(examples_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å"""
        help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫:*
1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞–ø—Ä–æ—Å
2. –ë–æ—Ç –∏—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries
3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

*–ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞:*
‚ñ∂Ô∏è *–°–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã* - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
üîÑ *–ï—â–µ —Ç–æ–≤–∞—Ä—ã* - –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
üìä *–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã* - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å—Ä–∞–∑—É

*–§–æ—Ä–º–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞:*
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5.0 - –æ—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä
‚≠ê‚≠ê‚≠ê‚≠ê‚ú® 4.5 - –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π  
‚≠ê‚≠ê‚≠ê‚≠ê‚òÜ 4.0 - —Ö–æ—Ä–æ—à–∏–π
‚≠ê‚≠ê‚≠ê‚òÜ‚òÜ 3.0 - —Å—Ä–µ–¥–Ω–∏–π

üéØ *–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏—â–µ—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!*
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="examples")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def back_to_main(self, query):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB Hunter!*

*–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
üìà *–î–æ 15 —Ç–æ–≤–∞—Ä–æ–≤* –≤ –æ–¥–Ω–æ–π –≤—ã–¥–∞—á–µ
üìÑ *–ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥* - –ª–∏—Å—Ç–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚≠ê *–¢–æ—á–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏* - 4.8, 5.0, 3.5 –∏ —Ç.–¥.
üéØ *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è* –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ

*–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏!* üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="examples")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    def parse_search_query(self, text):
        """–ü–∞—Ä—Å–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"""
        words = text.split()
        max_price = None
        clean_query = text
        
        for i, word in enumerate(words):
            if word.isdigit() and i > 0 and words[i-1].lower() in ['–¥–æ', 'max', '–º–∞–∫—Å–∏–º—É–º']:
                max_price = int(word)
                clean_query = ' '.join(words[:i-1] + words[i+1:])
                break
        
        return clean_query.strip(), max_price
    
    async def handle_search(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_query = update.message.text
        user_id = update.message.from_user.id
        
        clean_query, max_price = self.parse_search_query(user_query)
        
        if not clean_query:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å!")
            return
        
        search_message = await update.message.reply_text(
            f"üîç *–ò—â–µ–º:* {clean_query}\n"
            f"üí∞ *–ë—é–¥–∂–µ—Ç:* –¥–æ {max_price}‚ÇΩ\n\n"
            f"‚è≥ *–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...*",
            parse_mode='Markdown'
        )
        
        try:
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã (—Ç–µ–ø–µ—Ä—å –¥–æ 15 —à—Ç—É–∫)
            products = await asyncio.get_event_loop().run_in_executor(
                None, 
                self.searcher.search_products, 
                clean_query, max_price, 15
            )
            
            if products:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                self.user_searches[user_id] = {
                    'products': products,
                    'query': clean_query,
                    'max_price': max_price,
                    'current_page': 0
                }
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (5 —Ç–æ–≤–∞—Ä–æ–≤)
                page_products = products[:5]
                response = self.format_search_response(page_products, clean_query, max_price, 0, len(products))
                keyboard = self.create_results_keyboard(0, len(products), len(page_products))
                
                await search_message.edit_text(response, parse_mode='Markdown', 
                                            reply_markup=keyboard, disable_web_page_preview=True)
                
            else:
                response = f"üòî *–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
                response += f"*–ó–∞–ø—Ä–æ—Å:* {clean_query}\n"
                if max_price:
                    response += f"*–ë—é–¥–∂–µ—Ç:* –¥–æ {max_price}‚ÇΩ\n\n"
                response += "*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n"
                response += "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É\n"
                response += "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                response += "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
                
                await search_message.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            error_text = f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ*\n\n–û—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await search_message.edit_text(error_text, parse_mode='Markdown')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ WB Hunter Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        self.application.run_polling()
    
    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        self.searcher.close()

def main():
    bot = WBBot()
    try:
        bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
        bot.shutdown()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.shutdown()

if __name__ == "__main__":
    main()
